//<?php

class MVP
{
  lazy modules;
  lazy views;
  lazy response;
  status {
    Listening {
      entry/{
        // print __function__.' '.$this->status.'<br />';
      }

      exit/{
        // print __function__.' '.$this->status.'<br />';
      }
      run ->  Requested;
    }
    Requested {
      entry/{
        // print __function__.' '.$this->status.'<br />';

        // $this->view = New View();
        $this->modules = $this->getModulesList();
        $this->callViews();
      }
      processRequest -> View;
      returnRequest -> Listening;
    }
    View {
      entry/{
        // print __function__.' '.$this->status.'<br />';
        // $view = New View();
      }
      notify -> Presenter;
      display ->  Requested;
    }
    Presenter {
      entry/{
        // print __function__.' '.$this->status.'<br />';
      }
      updateModel -> Model;
      updateView -> View;
      getData -> Model;
    }
    Model {
      entry/{
        // print __function__.' '.$this->status.'<br />';
      }
    }
  }

  public function getModulesList(){
    $this->modules = array();
    foreach(glob(dirname(__file__)."/../modules/*/config/config.php") as $module){
    // foreach(glob(dirname(__file__)."/../modules/*/Module.php") as $module){
      // print $module;
      $moduleContents = include $module;
      $this->modules[] = $moduleContents;
    }
    return $this->modules;
  }

  public function callViews(){
    $this->views['#slots'] = array();
    foreach($this->modules as $module){
      include dirname(__file__).'/../modules/'.$module['name'].'/view/'.$module['view'].'.php';
      $view = New $module['view'];
      $this->views['#slots'] = array_replace_recursive($this->views['#slots'], $view->view());
    }
    $this->render($this->views['#slots']);

    $pre_render = '<pre>'.print_r($this->views,true).'</pre>';
    // print $this->render($this->views);
    $post_render = '<pre>'.print_r($this->views,true).'</pre>';
    $this->_log($this->views);
    $this->_log($post_render);


    $render = array(
      '#module' => 'system',
      '#view'   => 'SystemView',
      '#method' => 'layoutRender',
      '#args'   => array(
        'slots' => $this->views['#slots'],
      ),
    );
    $file = dirname(__file__).'/../modules/'.$render['#module'].'/view/'.$render['#view'].'.php';
    require_once $file;
    $view = New $render['#view'];
    $this->response = $view->{$render['#method']}($render['#args']);
  }

  public function render(&$element){
    if(!isset($element['#markup'])){
      if(is_array($element)){
        $element['#markup'] = array();
        foreach($this->children_elements($element) as $key => $children){
          $this->render($element[$key]);
          if(isset($element[$key]['#render'])){
            $render = $element[$key];
            $file = dirname(__file__).'/../modules/'.$render['#module'].'/view/'.$render['#view'].'.php';
            require_once $file;
            $view = New $render['#view'];
            $element[$key]['#markup'] = $view->{$render['#method']}($render['#args']);
          }
          elseif(!isset($element[$key]['#markup'])){
            if(is_array($element[$key])){
              $element[$key]['#markup'] = $this->render($element[$key]);
            }
          }
          if(is_array($element[$key])){
            $element['#markup'][] = $element[$key]['#markup'];
          }
          else{
            $element['#markup'][] = $element[$key];
          }
        }
      }
      else{
        // $this->_log(__function__. ' element 2');
        // $this->_log($element);
        // $element = array('#markup'=>$element);
        return $element;
      }
    }


    if(isset($element['#markup']) && is_array($element['#markup'])){
      $element['#markup'] = implode('',$element['#markup']);
      return $element['#markup'];
    }


    return $element['#markup'];
  }

  public function children_elements($elements){
    $children = array();
    foreach($elements as $key => $element){
      $padSimbolPos = strpos($key, '#');
      if($padSimbolPos === false || $padSimbolPos > 0){
        $children[$key] = $element;
      }
    }
    return $children;
  }

  public function _log($var){
    if(isset($_GET['log']) && $_GET['log'] == 1){
      print '<pre>'.print_r($var,true).'</pre>';
    }
  }
}


