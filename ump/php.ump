trait Identifiable {
  id;
}
class MVP{
  lazy view;
}

class Model{
}

class Presenter{
}
//<?php

generate Php;

//<?php

class MVP
{
  lazy modules;
  lazy views;
  status {
    Listening {
      entry/{
        // print __function__.' '.$this->status.'<br />';
      }

      exit/{
        // print __function__.' '.$this->status.'<br />';
      }
      run ->  Requested;
    }
    Requested {
      entry/{
        // print __function__.' '.$this->status.'<br />';
        $this->modules = $this->getModulesList();
        $this->callViews();
      }
      processRequest -> View;
      returnRequest -> Listening;
    }
    View {
      entry/{
        // print __function__.' '.$this->status.'<br />';
        $view = New View();
      }
      notify -> Presenter;
      display ->  Requested;
    }
    Presenter {
      entry/{
        // print __function__.' '.$this->status.'<br />';
      }
      updateModel -> Model;
      updateView -> View;
      getData -> Model;
    }
    Model {
      entry/{
        // print __function__.' '.$this->status.'<br />';
      }
    }
  }

  public function getModulesList(){
    $this->modules = array();
    foreach(glob(dirname(__file__)."/../modules/*/config/config.php") as $module){
    // foreach(glob(dirname(__file__)."/../modules/*/Module.php") as $module){
      // print $module;
      $moduleContents = include $module;
      $this->modules[] = $moduleContents;
    }
    return $this->modules;
  }

  public function callViews(){
    $this->views = array();
    foreach($this->modules as $module){
      include dirname(__file__).'/../modules/'.$module['name'].'/view/'.$module['view'].'.php';
      $view = New $module['view'];
      $this->views[] = $view->view();
    }
    $pre_render = '<pre>'.print_r($this->views,true).'</pre>';
    print $this->render($this->views);
    $post_render = '<pre>'.print_r($this->views,true).'</pre>';
    // print $pre_render.$post_render;
    // print '<pre>'.print_r($this->views,true).'</pre>';
    // print '<pre>'.print_r($this->render($this->views),true).'</pre>';
  }

  public function render(&$element){
    if(!isset($element['#markup'])){
      if(is_array($element)){
        foreach($this->children_elements($element) as $key => $children){
          $this->render($element[$key]);
          if(isset($element[$key]['#markup'])){
            $element['#markup'][] = $element[$key]['#markup'];
          }
          else{
            if(!isset($element['#render'])){
              $element['#markup'][] = $this->render($element[$key]);
            }
            else{
              // print_r($element);
            }
          }
        }
        if(!isset($element['#render'])){
          $element['#markup'] = implode(' ',$element['#markup']);
        }
        else{
          $render = $element['#render'];
          $file = dirname(__file__).'/../modules/'.$render['#module'].'/view/'.$render['#view'].'.php';
          require_once $file;
          $view = New $render['#view'];
          $element['#markup'] = $view->{$render['#method']}($render['#args']);
        }
      }
      else{
        return $element;
      }
    }
    return $element['#markup'];
  }

  public function children_elements($elements){
    $children = array();
    foreach($elements as $key => $element){
      $padSimbolPos = strpos($key, '#');
      if($padSimbolPos === false || $padSimbolPos > 0){
        $children[$key] = $element;
      }
    }
    return $children;
  }
}


